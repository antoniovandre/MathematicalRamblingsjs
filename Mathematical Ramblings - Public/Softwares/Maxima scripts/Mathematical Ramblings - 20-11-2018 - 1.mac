/*
Projeto Mathematical Ramblings (http://bit.ly/mathematicalramblings).

Script Maxima partículas de um gás ideal.

Utilizada versão MaximaOnAdroid 3.2.1.

Requer Antonio Vandré Pedrosa Furtunato Gomes - Maxima API.

Comunicar erro: "a.vandre.g@gmail.com".
*/

print ("Projeto Mathematical Ramblings (http://bit.ly/mathematicalramblings).");

print ("Script Maxima partículas de um gás ideal.");

n : read("Entre com o número de partículas:");

c : read ("Entre com o comprimento do recinto onde as partículas se encontram:");

l : read ("Entre com a largura do recinto onde as partículas se encontram:");

h : read ("Entre com a altura do recinto onde as partículas se encontram:");

t: read ("Entre com o intervalo de tempo a ser processado:");

p : zeromatrix (n, 7);

for i : 1 thru n do
     (p [i, 1] : read ("Entre com a massa da partícula ", i, ":"),
     p [i, 2] : read ("Entre com a posição inicial x da partícula ", i, ":"),
     p [i, 3] : read ("Entre com a posição inicial y da partícula ", i, ":"),
     p [i, 4] : read ("Entre com a posição inicial z da partícula ", i, ":"),
     p [i, 5] : read ("Entre com a velocidade inicial x da partícula ", i, ":"),
     p [i, 6] : read ("Entre com a velocidade inicial y da partícula ", i, ":"),
     p [i, 7] : read ("Entre com a velocidade inicial z da partícula ", i, ":"));

ps : read ("Precisão: em quantas partes deve ser dividida a unidade de comprimento?");

pt : read ("Precisão: em quantas partes deve ser dividida a unidade de tempo?");

fe : zeromatrix (n, n);
fc : zeromatrix (n, 3);

for i : 1 thru t * pt do
     for j : 1 thru n do
          (for k : 1 thru n do
               if (not j = k) and (abs (p [j, 2] - p [k, 2]) <= 1 / ps) and (abs (p [j, 3] - p [k, 3]) <= 1 / ps) and (abs (p [j, 4] - p [k, 4]) <= 1 / ps) then
                    if fe [j, k] = 0 then
                         (fe [j, k] : 1,
                         X : antoniovandre_sqlinsolve_cramer_2 (matrix ([p [j, 1], p [k, 1]], [-1, 1]), matrix ([p [j, 1] * p [j, 5] + p [k, 1] * p [j, 5]], [p [j, 5] - p [k, 5]])),
                         p [j, 5] : X [1, 1],
                         p [k, 5] : X [2, 1],
                         X : antoniovandre_sqlinsolve_cramer_2 (matrix ([p [j, 1], p [k, 1]], [-1, 1]), matrix ([p [j, 1] * p [j, 6] + p [k, 1] * p [j, 6]], [p [j, 6] - p [k, 6]])),
                         p [j, 6] : X [1, 1],
                         p [k, 6] : X [2, 1],
                         X : antoniovandre_sqlinsolve_cramer_2 (matrix ([p [j, 1], p [k, 1]], [-1, 1]), matrix ([p [j, 1] * p [j, 7] + p [k, 1] * p [j, 7]], [p [j, 7] - p [k, 7]])),
                         p [j, 7] : X [1, 1],
                         p [k, 7] : X [2, 1])
               else
                    fe [j, k] : 0,
          if (p [j, 2] > c - 1 / ps) or (p [j, 2] < 1 / ps) then
               if fc [j, 1] = 0 then
                    (fc [j, 1] : 1,
                    p [j, 5] : - p [j, 5])
          else
               fc [j, 1] : 0,
          if (p [j, 3] > l - 1 / ps) or (p [j, 3] < 1 / ps) then
               if fc [j, 2] = 0 then
                    (fc [j, 2] : 1,
                    p [j, 6] : - p [j, 6])
          else
               fc [j, 2] : 0,
          if (p [j, 4] > h - 1 / ps) or (p [j, 4] < 1 / ps) then
               if fc [j, 3] = 0 then
                    (fc [j, 3] : 1,
                    p [j, 7] : - p [j, 7])
          else
               fc [j, 3] : 0,
          p [j, 2] : p [j, 2] + p [j, 5] / pt,
          p [j, 3] : p [j, 3] + p [j, 6] / pt,
          p [j, 4] : p [j, 4] + p [j, 7] / pt);

for i : 1 thru n do
     (print ("As coordenadas da partícula ", i, " são (", p [i, 2], ", ", p [i, 3], ", ", p [i, 4], ")."),
     print ("O vetor velocidade da partícula ", i, " tem componentes (", p [i, 5], ", ", p [i, 6], ", ", p [i, 7], ")."));
